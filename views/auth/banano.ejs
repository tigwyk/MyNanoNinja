<% include ../../partials/header.ejs %>

<h1>Connect Banano Accounts</h1>

<div class="row">

  <div class="col">
    <div class="card mb-3">
      <div class="card-body">
        <h4 class="card-title">Verify Ownership</h4>
        <p class="card-text">
          To verify that you own the Banano address send <b>from the address to be verified</b>.
        </p>
        <p>
          <b>With this donation you help funding the costs of My Banano Ninja. Thank you for your support!</b>
        </p>
        <p>
          The amount is <%= amount %> BANANO or <%= amount_raw %> raw.<br> You probably need the <a href="https://github.com/nanocurrency/raiblocks/wiki/RPC-protocol#send"
            target="_blank" rel="noreferer, noopener">RPC send command</a> or send via a Wallet GUI by importing the seed.
          <div id="banano-button" class="btn btn-primary mb-3">
            Start verification
          </div>
          <h4 id="statustext"></h4>
        </p>
      </div>
    </div>
  </div>

</div>

<!-- <script src="/static/js/accept-banano/index.js"></script> -->
<script src="https://unpkg.com/@accept-banano/client@2"></script>

<script>
  const session = window.acceptBanano.createSession({
    apiURL: '<%= payment_api %>', // URL of your Accept NANO server (String, required)
    debug: false, // used for enabling debug mode, (Bool, non-required, false by default)
    pollInterval: 1500, // time period (ms) to check for verification of the payment sessions (Number, non-required, 1500 by default)
  });

  init.push(function () {
    $("#banano-button").click(
      function () {
        session.createPayment({
          data: {
            amount: '<%= amount %>',
            currency: 'banano'
          },
          onStart: (paymentData) => {
            console.log('onStart', paymentData)
          },
          onSuccess: (paymentData) => {
            console.log('onSuccess', paymentData)
            verifyPayment(paymentData.token)
          },
          onFailure: (failureReason) => {
            console.log('onFailure', failureReason)
            setPaymentStatus('Error: ' + failureReason);
          },
          onCancel: () => {
            setPaymentStatus('Verification cancelled.');
          }
        })
      }
    )
  });

  function verifyPayment(token) {
    setPaymentStatus('Verifying payment...');

    $.getJSON('/auth/connect/banano/' + token + '/verify', function (verifydata) {
      console.log(verifydata);

      if (verifydata.status == 'OK') {
        setPaymentStatus('Success! Redirecting...');
        setTimeout(function () {
          window.location = "/account/" + verifydata.sender;
        }, 1 * 1000);

      } else if (verifydata.error == 'not_fulfilled') {
        setPaymentStatus('Waiting for confimation...');
        setTimeout(function () {
          verifyPayment(token);
        }, 3000);

      } else {
        setPaymentStatus('Error: ' + verifydata.error);
      }
    });
  }

  function setPaymentStatus(status) {
    $("#statustext").text(status);
  }
</script>

<% include ../../partials/footer.ejs %>